/** @page execucao_exemplo Execução de exemplo

    Esta página mostra a execução de exemplo, demonstrando parcialmente os algoritmos na superclasse TProcuraConstrutiva, 
    com base na implementação CProblemaArtificial, que implementa espaços de procura artificiais.

    ## 1. Inicializar

```entrada
Problema artificial (TProcuraConstrutiva)
P1(Algoritmo): Largura Primeiro | P2(Debug): nada | P3(Ver): 1 | P4(Seed): 1
P5(Tempo): 10 | P6(Gerações): 1000000 | P7(Expansões): 0 | P8(Avaliações): 0
P9(Limite): 0 | P10(Repetidos): ignorar | P11(pesoAStar): 100 | P12(ruido): 0
P13(baralhar): 0
[Estatísticas] expansões 0 | gerações 0 | avaliações 0 
--<([1])>--
_______________________________________________________________________________
| 1 - Inicializar | 2 - Explorar | 3 - Solução/Caminho |
| 4 - Parâmetros  | 5 - Executar | 6 - Configurações   | 7 - Teste
Opção: **1**
```

Esta é a informação apresentada no teste manual. Na zona superior aparece o nome do problema, seguido dos parametros e valores atuais.
    Podemos ver que o primeiro parametro é o algoritmo, e está selecionado de omissão a Largura Primeiro.
    Em termos de Debug está selecionado o valor nada, ou seja, não é mostrada informação de debug.
    Seguem-se outros parametros, os quais alguns serão apresentados ao longo desta execução.

    Termina com a linha que tem estatísticas sobre a última execução efetuadal. 
    Após esta linha está o estado atual, que tem uma visualização dependente do problema.
    Temos um problema artificial em que cada estado tem um número inteiro positivo. 
    O primeiro estado é o número 1. 
    Após o estado temos o menu, com as opções de inicializar numa nova instância, 
    explorar o espaço de estados, ver a solução/caminho atual, alterar parametros,
    executar o algoritmo selecionado com os parametros atuais, gravar configuração
    e executar um teste empírico.

    Vamos começar por inicializar uma instância, com a opção 1. Vamos colocar entre ** e ** toda a entrada de texto do utilizador.
    Vamos também omitir a repetição dos menus entre entrada de dados, a não ser que exista uma alteração.

```entrada
Nova instância (atual 1) [1-10]: **1**
```
Temos 10 instâncias, vamos começar com a instância 1. As instâncias são artificiais, mas cada uma tem diferentes características

    ## 2. Explorar

A segunda opção permite explorar o espaço de estados. 

As instâncias são artificiais, e cada estado é identificado por um número aleatório. O estado inicial é o número 1. Vamos mudar para primeiro sucessor.

```entrada
Opção: **2**
g:0 h:4 1|2|3
--<([1])>--
  +#1 g:1 h:3 1|2|3 a2715811231
  |--<([2715811231])>--
  +#2 g:1 h:3 1|2|3 a3810139872
   --<([3810139872])>--
Sucessor [1-2, ação(ões), exe]: **1**
g:0 h:3 2|4|6
--<([2715811231])>--
  +#1 g:1 h:2 2|4|6 a83408230
  |--<([83408230])>--
  +#2 g:1 h:2 2|4|6 a3304292189
   --<([3304292189])>--
```
Avançamos para o sucessor escolhido. A cada momento é visível o estado atual e sucessores. Vamos avançar agora escolhendo uma ação, que no caso deste problema artificial é a letra A seguido do ID do estado. Num problema real a ação indica o que muda no estado.

```entrada
Sucessor [1-2, ação(ões), exe]:**a2877823625**
Ação a2877823625 inválida.
g:0 h:3 4|8|9
--<([2715811231])>--
  +#1 g:1 h:2 4|8|9 a83408230
  |--<([83408230])>--
  +#2 g:1 h:2 4|8|9 a3304292189
   --<([3304292189])>--
```
Podemos também mandar o algoritmo atual resolver o problema a partir do ponto atual
```entrada
Sucessor [1-2, ação(ões), exe]:**exe**
Resolvido (4)
g:0 9|16|1
--<([569745480])>--
Sem sucessores.
Problema artificial (TProcuraConstrutiva)
P1(Algoritmo): Largura Primeiro | P2(Debug): nada | P3(Ver): 1 | P4(Seed): 1
P5(Tempo): 10 | P6(Gerações): 1000000 | P7(Expansões): 0 | P8(Avaliações): 0
P9(Limite): 0 | P10(Repetidos): ignorar | P11(pesoAStar): 100 | P12(ruido): 0
P13(baralhar): 0
[Estatísticas] expansões 9 | gerações 16 | avaliações 1 
--<([569745480])>--
_______________________________________________________________________________
| 1 - Inicializar | 2 - Explorar | 3 - Solução/Caminho |
| 4 - Parâmetros  | 5 - Executar | 6 - Configurações   | 7 - Teste
```

    ## 3. Solução/Caminho

O problema está resolvido. Podemos ver que o estado atual termina com 0, o que no caso desta instância significa que é um estado objetivo. Vamos ver a solução / caminho do estado inicial até este estado. 

```entrada
Opção: **3**
--<([1])>-- (g:0) 
--<([2715811231])>-- (g:1) 
--<([2715811231])>-- (g:0) 
--<([83408230])>-- (g:1) 
--<([133476390])>-- (g:2) 
--<([2286212455])>-- (g:3) 
--<([569745480])>-- (g:4) 
```
Podemos ver a sequência de estados até ao estado atual. Vamos agora reinicializar o problema, para o resolver com o algoritmo atual
```entrada
Opção: **1**
Nova instância (atual 1) [1-10]: **0**
Problema artificial (TProcuraConstrutiva)
P1(Algoritmo): Largura Primeiro | P2(Debug): nada | P3(Ver): 1 | P4(Seed): 1
P5(Tempo): 10 | P6(Gerações): 1000000 | P7(Expansões): 0 | P8(Avaliações): 0
P9(Limite): 0 | P10(Repetidos): ignorar | P11(pesoAStar): 100 | P12(ruido): 0
P13(baralhar): 0
[Estatísticas] expansões 9 | gerações 16 | avaliações 1 
--<([1])>--
_______________________________________________________________________________
| 1 - Inicializar | 2 - Explorar | 3 - Solução/Caminho |
| 4 - Parâmetros  | 5 - Executar | 6 - Configurações   | 7 - Teste
```

Não é preciso escrever nada para aceitar a opção atual.

    ## 5. Executar

Com a opção 5 executamos o algoritmo atual, cujas configurações estão em cima. É a procura em largura.

```entrada
Opção: **5**
P1:1 P2:0 P3:1 P4:1 P5:10 P6:1000000 P7:0 P8:0 P9:0 P10:1
P11:100 P12:0 P13:0
Resultado: 5 (0,000s)
Problema artificial (TProcuraConstrutiva)
P1(Algoritmo): Largura Primeiro | P2(Debug): nada | P3(Ver): 1 | P4(Seed): 1
P5(Tempo): 10 | P6(Gerações): 1000000 | P7(Expansões): 0 | P8(Avaliações): 0
P9(Limite): 0 | P10(Repetidos): ignorar | P11(pesoAStar): 100 | P12(ruido): 0
P13(baralhar): 0
[Estatísticas] expansões 16 | gerações 32 | avaliações 0 
--<([569745480])>--
_______________________________________________________________________________
| 1 - Inicializar | 2 - Explorar | 3 - Solução/Caminho |
| 4 - Parâmetros  | 5 - Executar | 6 - Configurações   | 7 - Teste
```
O resultado foi 5 de custo, houve 16 expansões e 32 gerações. Vamos ver o caminho.

```entrada
Opção: **3**
--<([1])>-- (g:0) 
--<([2715811231])>-- (g:1) 
--<([83408230])>-- (g:2) 
--<([133476390])>-- (g:3) 
--<([2286212455])>-- (g:4) 
--<([569745480])>-- (g:5) 
...
_______________________________________________________________________________
| 1 - Inicializar | 2 - Explorar | 3 - Solução/Caminho |
| 4 - Parâmetros  | 5 - Executar | 6 - Configurações   | 7 - Teste
```

    ## 4. Parâmetros

Vamos agora ver os parâmetros que podemos alterar, para assim controlar a execução.
```entrada
Opção: **4**
P1(Algoritmo): Largura Primeiro (1 a 7)
P2(Debug): nada (0 a 4)
P3(Ver): 1 (1 a 100)
P4(Seed): 1 (1 a 1000000)
P5(Tempo): 10 (1 a 3600)
P6(Gerações): 1000000 (0 a 1000000000)
P7(Expansões): 0 (0 a 1000000000)
P8(Avaliações): 0 (0 a 1000000000)
P9(Limite): 0 (-1 a 1000000)
P10(Repetidos): ignorar (1 a 3)
P11(pesoAStar): 100 (0 a 10000)
P12(ruido): 0 (-100 a 100)
P13(baralhar): 0 (0 a 1)
```
O Debug dá o nível de informação sobre a procura. 
```entrada
Parametro:**2**
Nível de debug, de reduzido a completo.
0: nada
1: atividade
2: passos
3: detalhe
4: completo
```
Vamos colocar no máximo. Todos os parâmetros podem ser alterados pelo utilizador, incluindo o algoritmo que também é um parâmetro.
Vamos sair por agora destes parâmetros, e ver o resultado da mesma procura a visualizar nível de debug
Inicializar a instância
```entrada
Debug (atual 0): **4**
...
Parametro:**0**
Opção: **1**
Nova instância (atual 1) [1-10]: **1**
...
--<([1])>--
_______________________________________________________________________________
| 1 - Inicializar | 2 - Explorar | 3 - Solução/Caminho |
| 4 - Parâmetros  | 5 - Executar | 6 - Configurações   | 7 - Teste
Opção: **5**
```
O algoritmo executa mostrando o passo a passo detalhado da procura em largura. Mostra os estados expendidos por ordem.

```entrada
g:0 
--<([1])>--
  +#1 g:1 1|2 a2715811231
  |--<([2715811231])>--
  +#2 g:1 1|2 a3810139872
   --<([3810139872])>--
g:1 1|2
--<([2715811231])>--
  +#1 g:2 2|4 a83408230
  |--<([83408230])>--
  +#2 g:2 2|4 a3304292189
   --<([3304292189])>--
g:1 2|4
--<([3810139872])>--
  +#1 g:2 3|6 a4122472136
  |--<([4122472136])>--
  +#2 g:2 3|6 a121856739
   --<([121856739])>--
g:2 3|6
--<([83408230])>--
  +#1 g:3 4|8 a133476390
  |--<([133476390])>--
  +#2 g:3 4|8 a2633502549
   --<([2633502549])>--
g:2 4|8
--<([3304292189])>--
  +#1 g:3 5|10 a1571863460
  |--<([1571863460])>--
  +#2 g:3 5|10 a4004707490
   --<([4004707490])>--
g:2 5|10
--<([4122472136])>--
  +#1 g:3 6|12 a429453882
  |--<([429453882])>--
  +#2 g:3 6|12 a351905935
   --<([351905935])>--
g:2 6|12
--<([121856739])>--
  +#1 g:3 7|14 a3167673582
  |--<([3167673582])>--
  +#2 g:3 7|14 a1196313867
   --<([1196313867])>--
g:3 7|14
--<([133476390])>--
  +#1 g:4 8|16 a2286212455
  |--<([2286212455])>--
  +#2 g:4 8|16 a1183613525
   --<([1183613525])>--
g:3 8|16
--<([2633502549])>--
  +#1 g:4 9|18 a2087016448
  |--<([2087016448])>--
  +#2 g:4 9|18 a1392630028
   --<([1392630028])>--
g:3 9|18
--<([1571863460])>--
  +#1 g:4 10|20 a529298724
  |--<([529298724])>--
  +#2 g:4 10|20 a4134187428
   --<([4134187428])>--
g:3 10|20
--<([4004707490])>--
  +#1 g:4 11|22 a1136161046
  |--<([1136161046])>--
  +#2 g:4 11|22 a2052173069
   --<([2052173069])>--
g:3 11|22
--<([429453882])>--
  +#1 g:4 12|24 a2744182858
  |--<([2744182858])>--
  +#2 g:4 12|24 a2647232866
   --<([2647232866])>--
g:3 12|24
--<([351905935])>--
  +#1 g:4 13|26 a3482515819
  |--<([3482515819])>--
  +#2 g:4 13|26 a3421977228
   --<([3421977228])>--
g:3 13|26
--<([3167673582])>--
  +#1 g:4 14|28 a2429500569
  |--<([2429500569])>--
  +#2 g:4 14|28 a3406425564
   --<([3406425564])>--
g:3 14|28
--<([1196313867])>--
  +#1 g:4 15|30 a3170544065
  |--<([3170544065])>--
  +#2 g:4 15|30 a1421485048
   --<([1421485048])>--
g:4 15|30
--<([2286212455])>-- Solução encontrada!
--<([569745480])>--(g:5)
P1:1 P2:4 P3:1 P4:1 P5:10 P6:1000000 P7:0 P8:0 P9:0 P10:1
P11:100 P12:0 P13:0
Resultado: 5 (0,001s)
Problema artificial (TProcuraConstrutiva)
P1(Algoritmo): Largura Primeiro | P2(Debug): completo | P3(Ver): 1 | P4(Seed): 1
P5(Tempo): 10 | P6(Gerações): 1000000 | P7(Expansões): 0 | P8(Avaliações): 0
P9(Limite): 0 | P10(Repetidos): ignorar | P11(pesoAStar): 100 | P12(ruido): 0
P13(baralhar): 0
[Estatísticas] expansões 16 | gerações 32 | avaliações 0 
--<([569745480])>--
_______________________________________________________________________________
| 1 - Inicializar | 2 - Explorar | 3 - Solução/Caminho |
| 4 - Parâmetros  | 5 - Executar | 6 - Configurações   | 7 - Teste
```
Vamos agora ver o algoritmo em profundidade primeiro
```entrada
Opção: **4**
P1(Algoritmo): Largura Primeiro (1 a 7)
...
Parametro:**1**
Algoritmo base a executar.
1: Largura Primeiro
2: Custo Uniforme
3: Profundidade Primeiro
4: Melhor Primeiro
5: A*
6: IDA*
7: Branch and Bound
Algoritmo (atual 1): **3**
P1(Algoritmo): Profundidade Primeiro (1 a 7)
...
Parametro:**0**
Opção: **1**
Nova instância (atual 1) [1-10]: **1**
...
--<([1])>--
_______________________________________________________________________________
| 1 - Inicializar | 2 - Explorar | 3 - Solução/Caminho |
| 4 - Parâmetros  | 5 - Executar | 6 - Configurações   | 7 - Teste
Opção: **5**
```
O resultado foram várias procuras em diferentes níveis, o método iterativo, dado que o limite=0. 
```entrada
g:0 
--<([1])>--

Iteração 1: (expansões 0, gerações 0, avaliações 0)
g:0 
--<([1])>--

Iteração 2: (expansões 0, gerações 0, avaliações 0)
g:0 
--<([1])>--
  +g:1 1|2 a2715811231
  |--<([2715811231])>--
  |
  +g:1 1|2 a3810139872
   --<([3810139872])>--
   
Iteração 3: (expansões 1, gerações 2, avaliações 0)
g:0 1|2
--<([1])>--
  +g:1 2|4 a2715811231
  |--<([2715811231])>--
  |  +g:2 3|6 a83408230
  |  |--<([83408230])>--
  |  |
  |  +g:2 3|6 a3304292189
  |   --<([3304292189])>--
  |   
  +g:1 3|6 a3810139872
   --<([3810139872])>--
     +g:2 4|8 a4122472136
     |--<([4122472136])>--
     |
     +g:2 4|8 a121856739
      --<([121856739])>--
      
Iteração 4: (expansões 4, gerações 8, avaliações 0)
g:0 4|8
--<([1])>--
  +g:1 5|10 a2715811231
  |--<([2715811231])>--
  |  +g:2 6|12 a83408230
  |  |--<([83408230])>--
  |  |  +g:3 7|14 a133476390
  |  |  |--<([133476390])>--
  |  |  |
  |  |  +g:3 7|14 a2633502549
  |  |   --<([2633502549])>--
  |  |   
  |  +g:2 7|14 a3304292189
  |   --<([3304292189])>--
  |     +g:3 8|16 a1571863460
  |     |--<([1571863460])>--
  |     |
  |     +g:3 8|16 a4004707490
  |      --<([4004707490])>--
  |      
  +g:1 8|16 a3810139872
   --<([3810139872])>--
     +g:2 9|18 a4122472136
     |--<([4122472136])>--
     |  +g:3 10|20 a429453882
     |  |--<([429453882])>--
     |  |
     |  +g:3 10|20 a351905935
     |   --<([351905935])>--
     |   
     +g:2 10|20 a121856739
      --<([121856739])>--
        +g:3 11|22 a3167673582
        |--<([3167673582])>--
        |
        +g:3 11|22 a1196313867
         --<([1196313867])>--
         
Iteração 5: (expansões 11, gerações 22, avaliações 0)
g:0 11|22
--<([1])>--
  +g:1 12|24 a2715811231
  |--<([2715811231])>--
  |  +g:2 13|26 a83408230
  |  |--<([83408230])>--
  |  |  +g:3 14|28 a133476390
  |  |  |--<([133476390])>--
  |  |  |  +g:4 15|30 a2286212455
  |  |  |  |--<([2286212455])>--
  |  |  |  |
  |  |  |  +g:4 15|30 a1183613525
  |  |  |   --<([1183613525])>--
  |  |  |   
  |  |  +g:3 15|30 a2633502549
  |  |   --<([2633502549])>--
  |  |     +g:4 16|32 a2087016448
  |  |     |--<([2087016448])>--
  |  |     |
  |  |     +g:4 16|32 a1392630028
  |  |      --<([1392630028])>--
  |  |      
  |  +g:2 16|32 a3304292189
  |   --<([3304292189])>--
  |     +g:3 17|34 a1571863460
  |     |--<([1571863460])>--
  |     |  +g:4 18|36 a529298724
  |     |  |--<([529298724])>--
  |     |  |
  |     |  +g:4 18|36 a4134187428
  |     |   --<([4134187428])>--
  |     |   
  |     +g:3 18|36 a4004707490
  |      --<([4004707490])>--
  |        +g:4 19|38 a1136161046
  |        |--<([1136161046])>--
  |        |
  |        +g:4 19|38 a2052173069
  |         --<([2052173069])>--
  |         
  +g:1 19|38 a3810139872
   --<([3810139872])>--
     +g:2 20|40 a4122472136
     |--<([4122472136])>--
     |  +g:3 21|42 a429453882
     |  |--<([429453882])>--
     |  |  +g:4 22|44 a2744182858
     |  |  |--<([2744182858])>--
     |  |  |
     |  |  +g:4 22|44 a2647232866
     |  |   --<([2647232866])>--
     |  |   
     |  +g:3 22|44 a351905935
     |   --<([351905935])>--
     |     +g:4 23|46 a3482515819
     |     |--<([3482515819])>--
     |     |
     |     +g:4 23|46 a3421977228
     |      --<([3421977228])>--
     |      
     +g:2 23|46 a121856739
      --<([121856739])>--
        +g:3 24|48 a3167673582
        |--<([3167673582])>--
        |  +g:4 25|50 a2429500569
        |  |--<([2429500569])>--
        |  |
        |  +g:4 25|50 a3406425564
        |   --<([3406425564])>--
        |   
        +g:3 25|50 a1196313867
         --<([1196313867])>--
           +g:4 26|52 a3170544065
           |--<([3170544065])>--
           |
           +g:4 26|52 a1421485048
            --<([1421485048])>--
            
Iteração 6: (expansões 26, gerações 52, avaliações 0)
g:0 26|52
--<([1])>--
  +g:1 27|54 a2715811231
  |--<([2715811231])>--
  |  +g:2 28|56 a83408230
  |  |--<([83408230])>--
  |  |  +g:3 29|58 a133476390
  |  |  |--<([133476390])>--
  |  |  |  +g:4 30|60 a2286212455
  |  |  |  |--<([2286212455])>--
  |  |  |  |  +g:5 31|62 a569745480
  |  |  |  |  |--<([569745480])>--
  |  |  |  |  | Solução encontrada!
--<([569745480])>--(g:5)
P1:3 P2:4 P3:1 P4:1 P5:10 P6:1000000 P7:0 P8:0 P9:0 P10:1
P11:100 P12:0 P13:0
Resultado: 5 (0,001s)
Problema artificial (TProcuraConstrutiva)
P1(Algoritmo): Profundidade Primeiro | P2(Debug): completo | P3(Ver): 1 | P4(Seed): 1
P5(Tempo): 10 | P6(Gerações): 1000000 | P7(Expansões): 0 | P8(Avaliações): 0
P9(Limite): 0 | P10(Repetidos): ignorar | P11(pesoAStar): 100 | P12(ruido): 0
P13(baralhar): 0
[Estatísticas] expansões 31 | gerações 62 | avaliações 0 
--<([569745480])>--
_______________________________________________________________________________
| 1 - Inicializar | 2 - Explorar | 3 - Solução/Caminho |
| 4 - Parâmetros  | 5 - Executar | 6 - Configurações   | 7 - Teste
```
Vamos colocar o limite aberto, para ter a profundidade ilimitada
O parâmetro limite é para os algoritmos. Se for -1 significa que a profundidade é ilimitada, 0 é iterativo
-1 vamos colocar ilimitado para ver a procura completa
```entrada
Opção: **4**
P1(Algoritmo): Profundidade Primeiro (1 a 7)
...
P9(Limite): 0 (-1 a 1000000)
Parametro:**9**
Valor dependente do algoritmo. 
Largura: 0 sem limite, >0 número máximo de estados gerados não expandidos. 
Profundidade: >0 limite de profundidade, =0 iterativo, <0 sem limite.
Limite (atual 0): **-1**
Parametro:**0**
Opção: **1**
Nova instância (atual 1) [1-10]: **1**
Opção:**5**
```
Vemos agora a procura em profundidade ilimitada nesta instância, que por sorte vai direto à solução
```entrada
g:0 
--<([1])>--
  +g:1 1|2 a2715811231
  |--<([2715811231])>--
  |  +g:2 2|4 a83408230
  |  |--<([83408230])>--
  |  |  +g:3 3|6 a133476390
  |  |  |--<([133476390])>--
  |  |  |  +g:4 4|8 a2286212455
  |  |  |  |--<([2286212455])>--
  |  |  |  |  +g:5 5|10 a569745480
  |  |  |  |  |--<([569745480])>--
  |  |  |  |  | Solução encontrada!
--<([569745480])>--(g:5)
P1:3 P2:4 P3:1 P4:1 P5:10 P6:1000000 P7:0 P8:0 P9:-1 P10:1
P11:100 P12:0 P13:0
Resultado: 5 (0,000s)
Problema artificial (TProcuraConstrutiva)
P1(Algoritmo): Profundidade Primeiro | P2(Debug): completo | P3(Ver): 1 | P4(Seed): 1
P5(Tempo): 10 | P6(Gerações): 1000000 | P7(Expansões): 0 | P8(Avaliações): 0
P9(Limite): -1 | P10(Repetidos): ignorar | P11(pesoAStar): 100 | P12(ruido): 0
P13(baralhar): 0
[Estatísticas] expansões 5 | gerações 10 | avaliações 0 
--<([569745480])>--
```
Vamos mudar para a instância 2. Nesta instância os estados podem repetir-se.
```entrada
Opção: **1**
Nova instância (atual 1) [1-10]: **2**
...
--<([1])>--
_______________________________________________________________________________
| 1 - Inicializar | 2 - Explorar | 3 - Solução/Caminho |
| 4 - Parâmetros  | 5 - Executar | 6 - Configurações   | 7 - Teste
Opção: **2**
```
Vamos explorar para ver com é.
```entrada
g:0 h:1 1|4|5
--<([1])>--
  +#1 g:1 1|4|5 a19
  |--<([19])>--
  +#2 g:1 1|4|5 a8
  |--<([8])>--
  +#3 g:1 1|4|5 a35
  |--<([35])>--
  +#4 g:1 1|4|5 a91
   --<([91])>--
Sucessor [1-4, ação(ões), exe]:**2**
```
Temos os estados todos com 1 ou 2 dígitos. Há apenas 100 estados no máximo, alguns irão ser repetidos, ficando a árvore em grafo
```entrada
g:0 2|8|10
--<([8])>--
  +#1 g:1 2|8|10 a27
  |--<([27])>--
  +#2 g:1 2|8|10 a72
  |--<([72])>--
  +#3 g:1 2|8|10 a57
  |--<([57])>--
  +#4 g:1 2|8|10 a0
   --<([0])>--
Sucessor [1-4, ação(ões), exe]:**1**
```
Vamos mover um bocado, mas ao encontrar um estado que já tenha sido gerado, os sucessores serão os mesmos e há o risco de andarmos às voltas
```entrada
g:0 3|12|15
--<([27])>--
  +#1 g:1 3|12|15 a52
  |--<([52])>--
  +#2 g:1 3|12|15 a39
  |--<([39])>--
  +#3 g:1 3|12|15 a36
  |--<([36])>--
  +#4 g:1 3|12|15 a32
   --<([32])>--
Sucessor [1-4, ação(ões), exe]:**0**
...
[Estatísticas] expansões 3 | gerações 12 | avaliações 15 
--<([27])>--
...
Opção: **1**
Nova instância (atual 2) [1-10]: **2**
Opção: **5**
```
Esta instância é pequena, e lá encontramos um estado objetivo sem grande problema. O custo é 6, não sabemos se é o melhor.
```entrada
g:0 
--<([1])>--
  +g:1 1|4 a19
  |--<([19])>--
  |  +g:2 2|8 a3
  |  |--<([3])>--
  |  |  +g:3 3|12 a9
  |  |  |--<([9])>--
  |  |  |  +g:4 4|16 a44
  |  |  |  |--<([44])>--
  |  |  |  |  +g:5 5|20 a67
  |  |  |  |  |--<([67])>--
  |  |  |  |  |  +g:6 6|24 a89
  |  |  |  |  |  |--<([89])>--
  |  |  |  |  |  |
  |  |  |  |  |  +g:6 7|24 a79
  |  |  |  |  |  |--<([79])>--
  |  |  |  |  |  |
  |  |  |  |  |  +g:6 8|24 a30
  |  |  |  |  |  |--<([30])>--
  |  |  |  |  |  | Solução encontrada!
--<([30])>--(g:6)
P1:3 P2:4 P3:1 P4:1 P5:10 P6:1000000 P7:0 P8:0 P9:-1 P10:1
P11:100 P12:0 P13:0
Resultado: 6 (0,001s)
Problema artificial (TProcuraConstrutiva)
P1(Algoritmo): Profundidade Primeiro | P2(Debug): completo | P3(Ver): 1 | P4(Seed): 1
P5(Tempo): 10 | P6(Gerações): 1000000 | P7(Expansões): 0 | P8(Avaliações): 0
P9(Limite): -1 | P10(Repetidos): ignorar | P11(pesoAStar): 100 | P12(ruido): 0
P13(baralhar): 0
[Estatísticas] expansões 8 | gerações 24 | avaliações 0 
--<([30])>--
_______________________________________________________________________________
| 1 - Inicializar | 2 - Explorar | 3 - Solução/Caminho |
| 4 - Parâmetros  | 5 - Executar | 6 - Configurações   | 7 - Teste
```
Vamos mudar para a procura em largura
```entrada
Opção: **4**
Parametro: **1**
Algoritmo (atual 3): **1**
Parametro: **0**
Opção: **1**
Nova instância (atual 2) [1-10]: **2**
Opção: **5**
```
Vemos que afinal há uma solução de custo 2
```entrada
g:0 
--<([1])>--
  +#1 g:1 1|4 a19
  |--<([19])>--
  +#2 g:1 1|4 a8
  |--<([8])>--
  +#3 g:1 1|4 a35
  |--<([35])>--
  +#4 g:1 1|4 a91
   --<([91])>--
g:1 1|4
--<([19])>-- Solução encontrada!
--<([20])>--(g:2)
P1:1 P2:4 P3:1 P4:1 P5:10 P6:1000000 P7:0 P8:0 P9:0 P10:1
P11:100 P12:0 P13:0
Resultado: 2 (0,000s)
Problema artificial (TProcuraConstrutiva)
P1(Algoritmo): Largura Primeiro | P2(Debug): completo | P3(Ver): 1 | P4(Seed): 1
P5(Tempo): 10 | P6(Gerações): 1000000 | P7(Expansões): 0 | P8(Avaliações): 0
P9(Limite): 0 | P10(Repetidos): ignorar | P11(pesoAStar): 100 | P12(ruido): 0
P13(baralhar): 0
[Estatísticas] expansões 2 | gerações 8 | avaliações 0 
--<([20])>--
_______________________________________________________________________________
| 1 - Inicializar | 2 - Explorar | 3 - Solução/Caminho |
| 4 - Parâmetros  | 5 - Executar | 6 - Configurações   | 7 - Teste
```
ao ver a solução podemos ver a sequência de estados que liga o estado inicial ao objetivo
```entrada
Opção: **3**
--<([1])>-- (g:0) 
--<([19])>-- (g:1) 
--<([20])>-- (g:2) 
```
Avançamos para a instância 4 que tem custos não unitários em cada ação
```entrada
Opção: **1**
Nova instância (atual 2) [1-10]: **4**
Opção: **5**
```
O resultado é 16, mas a procura em largura não garante a solução ótima se os custos forem variáveis. 
```entrada
g:0 
--<([1])>--
  +#1 g:6 1|1 a4064520327
   --<([4064520327])>--
g:6 1|1
--<([4064520327])>--
  +#1 g:9 2|3 a746047585
  |--<([746047585])>--
  +#2 g:8 2|3 a2873979872
   --<([2873979872])>--
g:9 2|3
--<([746047585])>--
  +#1 g:17 3|6 a3035707222
  |--<([3035707222])>--
  +#2 g:19 3|6 a1354010043
  |--<([1354010043])>--
  +#3 g:15 3|6 a1479643398
   --<([1479643398])>--
g:8 3|6
--<([2873979872])>--
  +#1 g:16 4|8 a736496058
  |--<([736496058])>--
  +#2 g:17 4|8 a4255323763
   --<([4255323763])>--
g:17 4|8
--<([3035707222])>--
  +#1 g:19 5|9 a196181666
   --<([196181666])>--
g:19 5|9
--<([1354010043])>--
  +#1 g:24 6|10 a3490207519
   --<([3490207519])>--
g:15 6|10
--<([1479643398])>-- Solução encontrada!
--<([3583864740])>--(g:16)
P1:1 P2:4 P3:1 P4:1 P5:10 P6:1000000 P7:0 P8:0 P9:0 P10:1
P11:100 P12:0 P13:0
Resultado: 16 (0,001s)
Problema artificial (TProcuraConstrutiva)
P1(Algoritmo): Largura Primeiro | P2(Debug): completo | P3(Ver): 1 | P4(Seed): 1
P5(Tempo): 10 | P6(Gerações): 1000000 | P7(Expansões): 0 | P8(Avaliações): 0
P9(Limite): 0 | P10(Repetidos): ignorar | P11(pesoAStar): 100 | P12(ruido): 0
P13(baralhar): 0
[Estatísticas] expansões 7 | gerações 11 | avaliações 0 
--<([3583864740])>--
_______________________________________________________________________________
| 1 - Inicializar | 2 - Explorar | 3 - Solução/Caminho |
| 4 - Parâmetros  | 5 - Executar | 6 - Configurações   | 7 - Teste
```
    A execução de teste em Teste/CasosTeste/input.txt continua, mas terminamos aqui este exemplo de execução.

*/
